/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGIC:
      {
        Logic logic = (Logic)theEObject;
        T result = caseLogic(logic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONTRACT:
      {
        Contract contract = (Contract)theEObject;
        T result = caseContract(contract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CLAUSE:
      {
        Clause clause = (Clause)theEObject;
        T result = caseClause(clause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CLAUSE_PARAMETER:
      {
        ClauseParameter clauseParameter = (ClauseParameter)theEObject;
        T result = caseClauseParameter(clauseParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CLAUSE_BODY:
      {
        ClauseBody clauseBody = (ClauseBody)theEObject;
        T result = caseClauseBody(clauseBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMMAND:
      {
        Command command = (Command)theEObject;
        T result = caseCommand(command);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = caseCommand(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OTHER_DECLARATION:
      {
        OtherDeclaration otherDeclaration = (OtherDeclaration)theEObject;
        T result = caseOtherDeclaration(otherDeclaration);
        if (result == null) result = caseDeclaration(otherDeclaration);
        if (result == null) result = caseCommand(otherDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY_DECLARATION:
      {
        EntityDeclaration entityDeclaration = (EntityDeclaration)theEObject;
        T result = caseEntityDeclaration(entityDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY_DECLARATION_PARAM:
      {
        EntityDeclarationParam entityDeclarationParam = (EntityDeclarationParam)theEObject;
        T result = caseEntityDeclarationParam(entityDeclarationParam);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITIES:
      {
        Entities entities = (Entities)theEObject;
        T result = caseEntities(entities);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BASE_ENTITY:
      {
        BaseEntity baseEntity = (BaseEntity)theEObject;
        T result = caseBaseEntity(baseEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = caseBaseEntity(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUM_ENTITY:
      {
        EnumEntity enumEntity = (EnumEntity)theEObject;
        T result = caseEnumEntity(enumEntity);
        if (result == null) result = caseBaseEntity(enumEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUM_MEMBER:
      {
        EnumMember enumMember = (EnumMember)theEObject;
        T result = caseEnumMember(enumMember);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY_TYPE:
      {
        EntityType entityType = (EntityType)theEObject;
        T result = caseEntityType(entityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMITIVE_VARIABLE:
      {
        PrimitiveVariable primitiveVariable = (PrimitiveVariable)theEObject;
        T result = casePrimitiveVariable(primitiveVariable);
        if (result == null) result = caseVariable(primitiveVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADVANCED_VARIABLE:
      {
        AdvancedVariable advancedVariable = (AdvancedVariable)theEObject;
        T result = caseAdvancedVariable(advancedVariable);
        if (result == null) result = caseVariable(advancedVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMITIVE:
      {
        Primitive primitive = (Primitive)theEObject;
        T result = casePrimitive(primitive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = caseCommand(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBLIGATION_WRAPPER:
      {
        ObligationWrapper obligationWrapper = (ObligationWrapper)theEObject;
        T result = caseObligationWrapper(obligationWrapper);
        if (result == null) result = caseCommand(obligationWrapper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POWER_WRAPPER:
      {
        PowerWrapper powerWrapper = (PowerWrapper)theEObject;
        T result = casePowerWrapper(powerWrapper);
        if (result == null) result = caseCommand(powerWrapper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = caseCommand(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROPOSITION:
      {
        Proposition proposition = (Proposition)theEObject;
        T result = caseProposition(proposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OTHER_FUNCTION:
      {
        OtherFunction otherFunction = (OtherFunction)theEObject;
        T result = caseOtherFunction(otherFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION:
      {
        PredicateFunction predicateFunction = (PredicateFunction)theEObject;
        T result = casePredicateFunction(predicateFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT:
      {
        Point point = (Point)theEObject;
        T result = casePoint(point);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_EXPRESSION:
      {
        PointExpression pointExpression = (PointExpression)theEObject;
        T result = casePointExpression(pointExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TIMEVALUE:
      {
        Timevalue timevalue = (Timevalue)theEObject;
        T result = caseTimevalue(timevalue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INTERVAL:
      {
        Interval interval = (Interval)theEObject;
        T result = caseInterval(interval);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INTERVAL_EXPRESSION:
      {
        IntervalExpression intervalExpression = (IntervalExpression)theEObject;
        T result = caseIntervalExpression(intervalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SITUATION:
      {
        Situation situation = (Situation)theEObject;
        T result = caseSituation(situation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POWER_STATE:
      {
        PowerState powerState = (PowerState)theEObject;
        T result = casePowerState(powerState);
        if (result == null) result = caseSituation(powerState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBLIGATION_STATE:
      {
        ObligationState obligationState = (ObligationState)theEObject;
        T result = caseObligationState(obligationState);
        if (result == null) result = caseSituation(obligationState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONTRACT_STATE:
      {
        ContractState contractState = (ContractState)theEObject;
        T result = caseContractState(contractState);
        if (result == null) result = caseSituation(contractState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBLIGATION:
      {
        Obligation obligation = (Obligation)theEObject;
        T result = caseObligation(obligation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POWER:
      {
        Power power = (Power)theEObject;
        T result = casePower(power);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POWER_FUNCTION:
      {
        PowerFunction powerFunction = (PowerFunction)theEObject;
        T result = casePowerFunction(powerFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.REF:
      {
        Ref ref = (Ref)theEObject;
        T result = caseRef(ref);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POR:
      {
        POr pOr = (POr)theEObject;
        T result = casePOr(pOr);
        if (result == null) result = caseProposition(pOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PAND:
      {
        PAnd pAnd = (PAnd)theEObject;
        T result = casePAnd(pAnd);
        if (result == null) result = caseProposition(pAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PEQUALITY:
      {
        PEquality pEquality = (PEquality)theEObject;
        T result = casePEquality(pEquality);
        if (result == null) result = caseProposition(pEquality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PCOMPARISON:
      {
        PComparison pComparison = (PComparison)theEObject;
        T result = casePComparison(pComparison);
        if (result == null) result = caseProposition(pComparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_RECURSIVE:
      {
        PAtomRecursive pAtomRecursive = (PAtomRecursive)theEObject;
        T result = casePAtomRecursive(pAtomRecursive);
        if (result == null) result = caseProposition(pAtomRecursive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NEGATED_PATOM:
      {
        NegatedPAtom negatedPAtom = (NegatedPAtom)theEObject;
        T result = caseNegatedPAtom(negatedPAtom);
        if (result == null) result = caseProposition(negatedPAtom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_PREDICATE:
      {
        PAtomPredicate pAtomPredicate = (PAtomPredicate)theEObject;
        T result = casePAtomPredicate(pAtomPredicate);
        if (result == null) result = caseProposition(pAtomPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_FUNCTION:
      {
        PAtomFunction pAtomFunction = (PAtomFunction)theEObject;
        T result = casePAtomFunction(pAtomFunction);
        if (result == null) result = caseProposition(pAtomFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_ENUM:
      {
        PAtomEnum pAtomEnum = (PAtomEnum)theEObject;
        T result = casePAtomEnum(pAtomEnum);
        if (result == null) result = caseProposition(pAtomEnum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_VARIABLE:
      {
        PAtomVariable pAtomVariable = (PAtomVariable)theEObject;
        T result = casePAtomVariable(pAtomVariable);
        if (result == null) result = caseProposition(pAtomVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_PREDICATE_TRUE_LITERAL:
      {
        PAtomPredicateTrueLiteral pAtomPredicateTrueLiteral = (PAtomPredicateTrueLiteral)theEObject;
        T result = casePAtomPredicateTrueLiteral(pAtomPredicateTrueLiteral);
        if (result == null) result = caseProposition(pAtomPredicateTrueLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_PREDICATE_FALSE_LITERAL:
      {
        PAtomPredicateFalseLiteral pAtomPredicateFalseLiteral = (PAtomPredicateFalseLiteral)theEObject;
        T result = casePAtomPredicateFalseLiteral(pAtomPredicateFalseLiteral);
        if (result == null) result = caseProposition(pAtomPredicateFalseLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_DOUBLE_LITERAL:
      {
        PAtomDoubleLiteral pAtomDoubleLiteral = (PAtomDoubleLiteral)theEObject;
        T result = casePAtomDoubleLiteral(pAtomDoubleLiteral);
        if (result == null) result = caseProposition(pAtomDoubleLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_INT_LITERAL:
      {
        PAtomIntLiteral pAtomIntLiteral = (PAtomIntLiteral)theEObject;
        T result = casePAtomIntLiteral(pAtomIntLiteral);
        if (result == null) result = caseProposition(pAtomIntLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_STRING_LITERAL:
      {
        PAtomStringLiteral pAtomStringLiteral = (PAtomStringLiteral)theEObject;
        T result = casePAtomStringLiteral(pAtomStringLiteral);
        if (result == null) result = caseProposition(pAtomStringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PATOM_DATE_LITERAL:
      {
        PAtomDateLiteral pAtomDateLiteral = (PAtomDateLiteral)theEObject;
        T result = casePAtomDateLiteral(pAtomDateLiteral);
        if (result == null) result = caseProposition(pAtomDateLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_IS_EQUAL:
      {
        PredicateFunctionIsEqual predicateFunctionIsEqual = (PredicateFunctionIsEqual)theEObject;
        T result = casePredicateFunctionIsEqual(predicateFunctionIsEqual);
        if (result == null) result = caseOtherFunction(predicateFunctionIsEqual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_IS_OWNER:
      {
        PredicateFunctionIsOwner predicateFunctionIsOwner = (PredicateFunctionIsOwner)theEObject;
        T result = casePredicateFunctionIsOwner(predicateFunctionIsOwner);
        if (result == null) result = caseOtherFunction(predicateFunctionIsOwner);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_CANNOT_BE_ASSIGNED:
      {
        PredicateFunctionCannotBeAssigned predicateFunctionCannotBeAssigned = (PredicateFunctionCannotBeAssigned)theEObject;
        T result = casePredicateFunctionCannotBeAssigned(predicateFunctionCannotBeAssigned);
        if (result == null) result = caseOtherFunction(predicateFunctionCannotBeAssigned);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_HAPPENS:
      {
        PredicateFunctionHappens predicateFunctionHappens = (PredicateFunctionHappens)theEObject;
        T result = casePredicateFunctionHappens(predicateFunctionHappens);
        if (result == null) result = casePredicateFunction(predicateFunctionHappens);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_WHAPPENS_BEFORE:
      {
        PredicateFunctionWHappensBefore predicateFunctionWHappensBefore = (PredicateFunctionWHappensBefore)theEObject;
        T result = casePredicateFunctionWHappensBefore(predicateFunctionWHappensBefore);
        if (result == null) result = casePredicateFunction(predicateFunctionWHappensBefore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_SHAPPENS_BEFORE:
      {
        PredicateFunctionSHappensBefore predicateFunctionSHappensBefore = (PredicateFunctionSHappensBefore)theEObject;
        T result = casePredicateFunctionSHappensBefore(predicateFunctionSHappensBefore);
        if (result == null) result = casePredicateFunction(predicateFunctionSHappensBefore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_HAPPENS_WITHIN:
      {
        PredicateFunctionHappensWithin predicateFunctionHappensWithin = (PredicateFunctionHappensWithin)theEObject;
        T result = casePredicateFunctionHappensWithin(predicateFunctionHappensWithin);
        if (result == null) result = casePredicateFunction(predicateFunctionHappensWithin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_WHAPPENS_BEFORE_EVENT:
      {
        PredicateFunctionWHappensBeforeEvent predicateFunctionWHappensBeforeEvent = (PredicateFunctionWHappensBeforeEvent)theEObject;
        T result = casePredicateFunctionWHappensBeforeEvent(predicateFunctionWHappensBeforeEvent);
        if (result == null) result = casePredicateFunction(predicateFunctionWHappensBeforeEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_SHAPPENS_BEFORE_EVENT:
      {
        PredicateFunctionSHappensBeforeEvent predicateFunctionSHappensBeforeEvent = (PredicateFunctionSHappensBeforeEvent)theEObject;
        T result = casePredicateFunctionSHappensBeforeEvent(predicateFunctionSHappensBeforeEvent);
        if (result == null) result = casePredicateFunction(predicateFunctionSHappensBeforeEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_HAPPENS_AFTER:
      {
        PredicateFunctionHappensAfter predicateFunctionHappensAfter = (PredicateFunctionHappensAfter)theEObject;
        T result = casePredicateFunctionHappensAfter(predicateFunctionHappensAfter);
        if (result == null) result = casePredicateFunction(predicateFunctionHappensAfter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PREDICATE_FUNCTION_OCCURS:
      {
        PredicateFunctionOccurs predicateFunctionOccurs = (PredicateFunctionOccurs)theEObject;
        T result = casePredicateFunctionOccurs(predicateFunctionOccurs);
        if (result == null) result = casePredicateFunction(predicateFunctionOccurs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VARIABLE_EVENT:
      {
        VariableEvent variableEvent = (VariableEvent)theEObject;
        T result = caseVariableEvent(variableEvent);
        if (result == null) result = caseEvent(variableEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POWER_EVENT:
      {
        PowerEvent powerEvent = (PowerEvent)theEObject;
        T result = casePowerEvent(powerEvent);
        if (result == null) result = caseEvent(powerEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBLIGATION_EVENT:
      {
        ObligationEvent obligationEvent = (ObligationEvent)theEObject;
        T result = caseObligationEvent(obligationEvent);
        if (result == null) result = caseEvent(obligationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONTRACT_EVENT:
      {
        ContractEvent contractEvent = (ContractEvent)theEObject;
        T result = caseContractEvent(contractEvent);
        if (result == null) result = caseEvent(contractEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_FUNCTION:
      {
        PointFunction pointFunction = (PointFunction)theEObject;
        T result = casePointFunction(pointFunction);
        if (result == null) result = casePointExpression(pointFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_ATOM_PARAMETER_DOT_EXPRESSION:
      {
        PointAtomParameterDotExpression pointAtomParameterDotExpression = (PointAtomParameterDotExpression)theEObject;
        T result = casePointAtomParameterDotExpression(pointAtomParameterDotExpression);
        if (result == null) result = casePointExpression(pointAtomParameterDotExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_ATOM_OBLIGATION_EVENT:
      {
        PointAtomObligationEvent pointAtomObligationEvent = (PointAtomObligationEvent)theEObject;
        T result = casePointAtomObligationEvent(pointAtomObligationEvent);
        if (result == null) result = casePointExpression(pointAtomObligationEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_ATOM_CONTRACT_EVENT:
      {
        PointAtomContractEvent pointAtomContractEvent = (PointAtomContractEvent)theEObject;
        T result = casePointAtomContractEvent(pointAtomContractEvent);
        if (result == null) result = casePointExpression(pointAtomContractEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINT_ATOM_POWER_EVENT:
      {
        PointAtomPowerEvent pointAtomPowerEvent = (PointAtomPowerEvent)theEObject;
        T result = casePointAtomPowerEvent(pointAtomPowerEvent);
        if (result == null) result = casePointExpression(pointAtomPowerEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TIMEVALUE_INT:
      {
        TimevalueInt timevalueInt = (TimevalueInt)theEObject;
        T result = caseTimevalueInt(timevalueInt);
        if (result == null) result = caseTimevalue(timevalueInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TIMEVALUE_VARIABLE:
      {
        TimevalueVariable timevalueVariable = (TimevalueVariable)theEObject;
        T result = caseTimevalueVariable(timevalueVariable);
        if (result == null) result = caseTimevalue(timevalueVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INTERVAL_FUNCTION:
      {
        IntervalFunction intervalFunction = (IntervalFunction)theEObject;
        T result = caseIntervalFunction(intervalFunction);
        if (result == null) result = caseIntervalExpression(intervalFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SITUATION_EXPRESSION:
      {
        SituationExpression situationExpression = (SituationExpression)theEObject;
        T result = caseSituationExpression(situationExpression);
        if (result == null) result = caseIntervalExpression(situationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_OBLIGATION_SUSPENDED:
      {
        PFObligationSuspended pfObligationSuspended = (PFObligationSuspended)theEObject;
        T result = casePFObligationSuspended(pfObligationSuspended);
        if (result == null) result = casePowerFunction(pfObligationSuspended);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_OBLIGATION_RESUMED:
      {
        PFObligationResumed pfObligationResumed = (PFObligationResumed)theEObject;
        T result = casePFObligationResumed(pfObligationResumed);
        if (result == null) result = casePowerFunction(pfObligationResumed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_OBLIGATION_DISCHARGED:
      {
        PFObligationDischarged pfObligationDischarged = (PFObligationDischarged)theEObject;
        T result = casePFObligationDischarged(pfObligationDischarged);
        if (result == null) result = casePowerFunction(pfObligationDischarged);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_OBLIGATION_TERMINATED:
      {
        PFObligationTerminated pfObligationTerminated = (PFObligationTerminated)theEObject;
        T result = casePFObligationTerminated(pfObligationTerminated);
        if (result == null) result = casePowerFunction(pfObligationTerminated);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_OBLIGATION_TRIGGERED:
      {
        PFObligationTriggered pfObligationTriggered = (PFObligationTriggered)theEObject;
        T result = casePFObligationTriggered(pfObligationTriggered);
        if (result == null) result = casePowerFunction(pfObligationTriggered);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_CONTRACT_SUSPENDED:
      {
        PFContractSuspended pfContractSuspended = (PFContractSuspended)theEObject;
        T result = casePFContractSuspended(pfContractSuspended);
        if (result == null) result = casePowerFunction(pfContractSuspended);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_CONTRACT_RESUMED:
      {
        PFContractResumed pfContractResumed = (PFContractResumed)theEObject;
        T result = casePFContractResumed(pfContractResumed);
        if (result == null) result = casePowerFunction(pfContractResumed);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PF_CONTRACT_TERMINATED:
      {
        PFContractTerminated pfContractTerminated = (PFContractTerminated)theEObject;
        T result = casePFContractTerminated(pfContractTerminated);
        if (result == null) result = casePowerFunction(pfContractTerminated);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VARIABLE_DOT_EXPRESSION:
      {
        VariableDotExpression variableDotExpression = (VariableDotExpression)theEObject;
        T result = caseVariableDotExpression(variableDotExpression);
        if (result == null) result = caseRef(variableDotExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VARIABLE_REF:
      {
        VariableRef variableRef = (VariableRef)theEObject;
        T result = caseVariableRef(variableRef);
        if (result == null) result = caseRef(variableRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPARISON:
      {
        Comparison comparison = (Comparison)theEObject;
        T result = caseComparison(comparison);
        if (result == null) result = caseExpression(comparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULTI:
      {
        Multi multi = (Multi)theEObject;
        T result = caseMulti(multi);
        if (result == null) result = caseExpression(multi);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIV:
      {
        Div div = (Div)theEObject;
        T result = caseDiv(div);
        if (result == null) result = caseExpression(div);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMARY_EXPRESSION_RECURSIVE:
      {
        PrimaryExpressionRecursive primaryExpressionRecursive = (PrimaryExpressionRecursive)theEObject;
        T result = casePrimaryExpressionRecursive(primaryExpressionRecursive);
        if (result == null) result = caseExpression(primaryExpressionRecursive);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMARY_EXPRESSION_FUNCTION_CALL:
      {
        PrimaryExpressionFunctionCall primaryExpressionFunctionCall = (PrimaryExpressionFunctionCall)theEObject;
        T result = casePrimaryExpressionFunctionCall(primaryExpressionFunctionCall);
        if (result == null) result = caseExpression(primaryExpressionFunctionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NEGATED_PRIMARY_EXPRESSION:
      {
        NegatedPrimaryExpression negatedPrimaryExpression = (NegatedPrimaryExpression)theEObject;
        T result = caseNegatedPrimaryExpression(negatedPrimaryExpression);
        if (result == null) result = caseExpression(negatedPrimaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_TRUE:
      {
        AtomicExpressionTrue atomicExpressionTrue = (AtomicExpressionTrue)theEObject;
        T result = caseAtomicExpressionTrue(atomicExpressionTrue);
        if (result == null) result = caseExpression(atomicExpressionTrue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_FALSE:
      {
        AtomicExpressionFalse atomicExpressionFalse = (AtomicExpressionFalse)theEObject;
        T result = caseAtomicExpressionFalse(atomicExpressionFalse);
        if (result == null) result = caseExpression(atomicExpressionFalse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_DOUBLE:
      {
        AtomicExpressionDouble atomicExpressionDouble = (AtomicExpressionDouble)theEObject;
        T result = caseAtomicExpressionDouble(atomicExpressionDouble);
        if (result == null) result = caseExpression(atomicExpressionDouble);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_INT:
      {
        AtomicExpressionInt atomicExpressionInt = (AtomicExpressionInt)theEObject;
        T result = caseAtomicExpressionInt(atomicExpressionInt);
        if (result == null) result = caseExpression(atomicExpressionInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_DATE:
      {
        AtomicExpressionDate atomicExpressionDate = (AtomicExpressionDate)theEObject;
        T result = caseAtomicExpressionDate(atomicExpressionDate);
        if (result == null) result = caseExpression(atomicExpressionDate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_ENUM:
      {
        AtomicExpressionEnum atomicExpressionEnum = (AtomicExpressionEnum)theEObject;
        T result = caseAtomicExpressionEnum(atomicExpressionEnum);
        if (result == null) result = caseExpression(atomicExpressionEnum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_STRING:
      {
        AtomicExpressionString atomicExpressionString = (AtomicExpressionString)theEObject;
        T result = caseAtomicExpressionString(atomicExpressionString);
        if (result == null) result = caseExpression(atomicExpressionString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_EXPRESSION_PARAMETER:
      {
        AtomicExpressionParameter atomicExpressionParameter = (AtomicExpressionParameter)theEObject;
        T result = caseAtomicExpressionParameter(atomicExpressionParameter);
        if (result == null) result = caseExpression(atomicExpressionParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TWO_ARG_MATH_FUNCTION:
      {
        TwoArgMathFunction twoArgMathFunction = (TwoArgMathFunction)theEObject;
        T result = caseTwoArgMathFunction(twoArgMathFunction);
        if (result == null) result = caseFunctionCall(twoArgMathFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ONE_ARG_MATH_FUNCTION:
      {
        OneArgMathFunction oneArgMathFunction = (OneArgMathFunction)theEObject;
        T result = caseOneArgMathFunction(oneArgMathFunction);
        if (result == null) result = caseFunctionCall(oneArgMathFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.THREE_ARG_STRING_FUNCTION:
      {
        ThreeArgStringFunction threeArgStringFunction = (ThreeArgStringFunction)theEObject;
        T result = caseThreeArgStringFunction(threeArgStringFunction);
        if (result == null) result = caseFunctionCall(threeArgStringFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TWO_ARG_STRING_FUNCTION:
      {
        TwoArgStringFunction twoArgStringFunction = (TwoArgStringFunction)theEObject;
        T result = caseTwoArgStringFunction(twoArgStringFunction);
        if (result == null) result = caseFunctionCall(twoArgStringFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ONE_ARG_STRING_FUNCTION:
      {
        OneArgStringFunction oneArgStringFunction = (OneArgStringFunction)theEObject;
        T result = caseOneArgStringFunction(oneArgStringFunction);
        if (result == null) result = caseFunctionCall(oneArgStringFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.THREE_ARG_DATE_FUNCTION:
      {
        ThreeArgDateFunction threeArgDateFunction = (ThreeArgDateFunction)theEObject;
        T result = caseThreeArgDateFunction(threeArgDateFunction);
        if (result == null) result = caseFunctionCall(threeArgDateFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogic(Logic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContract(Contract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClause(Clause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clause Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clause Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClauseParameter(ClauseParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Clause Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Clause Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClauseBody(ClauseBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommand(Command object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherDeclaration(OtherDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityDeclaration(EntityDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Declaration Param</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Declaration Param</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityDeclarationParam(EntityDeclarationParam object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entities</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entities</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntities(Entities object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Base Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Base Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBaseEntity(BaseEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumEntity(EnumEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Member</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Member</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumMember(EnumMember object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityType(EntityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveVariable(PrimitiveVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Advanced Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Advanced Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdvancedVariable(AdvancedVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitive(Primitive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obligation Wrapper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obligation Wrapper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObligationWrapper(ObligationWrapper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power Wrapper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power Wrapper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerWrapper(PowerWrapper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proposition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proposition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProposition(Proposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Other Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Other Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherFunction(OtherFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunction(PredicateFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePoint(Point object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointExpression(PointExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timevalue</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timevalue</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimevalue(Timevalue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterval(Interval object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalExpression(IntervalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Situation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Situation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSituation(Situation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerState(PowerState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obligation State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obligation State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObligationState(ObligationState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractState(ContractState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obligation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obligation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObligation(Obligation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePower(Power object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerFunction(PowerFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRef(Ref object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>POr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>POr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePOr(POr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAnd</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAnd</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAnd(PAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PEquality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PEquality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePEquality(PEquality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PComparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PComparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePComparison(PComparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Recursive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Recursive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomRecursive(PAtomRecursive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negated PAtom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negated PAtom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegatedPAtom(NegatedPAtom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomPredicate(PAtomPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomFunction(PAtomFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomEnum(PAtomEnum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomVariable(PAtomVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Predicate True Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Predicate True Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomPredicateTrueLiteral(PAtomPredicateTrueLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Predicate False Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Predicate False Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomPredicateFalseLiteral(PAtomPredicateFalseLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Double Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Double Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomDoubleLiteral(PAtomDoubleLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Int Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Int Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomIntLiteral(PAtomIntLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomStringLiteral(PAtomStringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Date Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Date Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomDateLiteral(PAtomDateLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Is Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Is Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionIsEqual(PredicateFunctionIsEqual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Is Owner</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Is Owner</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionIsOwner(PredicateFunctionIsOwner object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Cannot Be Assigned</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Cannot Be Assigned</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionCannotBeAssigned(PredicateFunctionCannotBeAssigned object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Happens</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Happens</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionHappens(PredicateFunctionHappens object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function WHappens Before</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function WHappens Before</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionWHappensBefore(PredicateFunctionWHappensBefore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function SHappens Before</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function SHappens Before</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionSHappensBefore(PredicateFunctionSHappensBefore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Happens Within</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Happens Within</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionHappensWithin(PredicateFunctionHappensWithin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function WHappens Before Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function WHappens Before Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionWHappensBeforeEvent(PredicateFunctionWHappensBeforeEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function SHappens Before Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function SHappens Before Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionSHappensBeforeEvent(PredicateFunctionSHappensBeforeEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Happens After</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Happens After</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionHappensAfter(PredicateFunctionHappensAfter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Function Occurs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Function Occurs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateFunctionOccurs(PredicateFunctionOccurs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableEvent(VariableEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Power Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Power Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePowerEvent(PowerEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Obligation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Obligation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseObligationEvent(ObligationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractEvent(ContractEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointFunction(PointFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Atom Parameter Dot Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Atom Parameter Dot Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointAtomParameterDotExpression(PointAtomParameterDotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Atom Obligation Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Atom Obligation Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointAtomObligationEvent(PointAtomObligationEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Atom Contract Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Atom Contract Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointAtomContractEvent(PointAtomContractEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point Atom Power Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point Atom Power Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointAtomPowerEvent(PointAtomPowerEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timevalue Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timevalue Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimevalueInt(TimevalueInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timevalue Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timevalue Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimevalueVariable(TimevalueVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interval Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interval Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntervalFunction(IntervalFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Situation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Situation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSituationExpression(SituationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Obligation Suspended</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Obligation Suspended</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFObligationSuspended(PFObligationSuspended object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Obligation Resumed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Obligation Resumed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFObligationResumed(PFObligationResumed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Obligation Discharged</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Obligation Discharged</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFObligationDischarged(PFObligationDischarged object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Obligation Terminated</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Obligation Terminated</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFObligationTerminated(PFObligationTerminated object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Obligation Triggered</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Obligation Triggered</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFObligationTriggered(PFObligationTriggered object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Contract Suspended</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Contract Suspended</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFContractSuspended(PFContractSuspended object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Contract Resumed</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Contract Resumed</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFContractResumed(PFContractResumed object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PF Contract Terminated</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PF Contract Terminated</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePFContractTerminated(PFContractTerminated object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Dot Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Dot Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDotExpression(VariableDotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableRef(VariableRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparison(Comparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multi</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multi</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulti(Multi object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiv(Div object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expression Recursive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expression Recursive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpressionRecursive(PrimaryExpressionRecursive object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary Expression Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary Expression Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimaryExpressionFunctionCall(PrimaryExpressionFunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negated Primary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negated Primary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegatedPrimaryExpression(NegatedPrimaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression True</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression True</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionTrue(AtomicExpressionTrue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression False</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression False</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionFalse(AtomicExpressionFalse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression Double</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression Double</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionDouble(AtomicExpressionDouble object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionInt(AtomicExpressionInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression Date</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression Date</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionDate(AtomicExpressionDate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionEnum(AtomicExpressionEnum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionString(AtomicExpressionString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic Expression Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic Expression Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomicExpressionParameter(AtomicExpressionParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Two Arg Math Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Two Arg Math Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTwoArgMathFunction(TwoArgMathFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One Arg Math Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One Arg Math Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneArgMathFunction(OneArgMathFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Three Arg String Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Three Arg String Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThreeArgStringFunction(ThreeArgStringFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Two Arg String Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Two Arg String Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTwoArgStringFunction(TwoArgStringFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One Arg String Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One Arg String Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneArgStringFunction(OneArgStringFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Three Arg Date Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Three Arg Date Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThreeArgDateFunction(ThreeArgDateFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch

/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Event;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PointAtomPowerEvent;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Point Atom Power Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.PointAtomPowerEventImpl#getPowerEvent <em>Power Event</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PointAtomPowerEventImpl extends PointExpressionImpl implements PointAtomPowerEvent
{
  /**
   * The cached value of the '{@link #getPowerEvent() <em>Power Event</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPowerEvent()
   * @generated
   * @ordered
   */
  protected Event powerEvent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PointAtomPowerEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.POINT_ATOM_POWER_EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event getPowerEvent()
  {
    return powerEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPowerEvent(Event newPowerEvent, NotificationChain msgs)
  {
    Event oldPowerEvent = powerEvent;
    powerEvent = newPowerEvent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT, oldPowerEvent, newPowerEvent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPowerEvent(Event newPowerEvent)
  {
    if (newPowerEvent != powerEvent)
    {
      NotificationChain msgs = null;
      if (powerEvent != null)
        msgs = ((InternalEObject)powerEvent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT, null, msgs);
      if (newPowerEvent != null)
        msgs = ((InternalEObject)newPowerEvent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT, null, msgs);
      msgs = basicSetPowerEvent(newPowerEvent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT, newPowerEvent, newPowerEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT:
        return basicSetPowerEvent(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT:
        return getPowerEvent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT:
        setPowerEvent((Event)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT:
        setPowerEvent((Event)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.POINT_ATOM_POWER_EVENT__POWER_EVENT:
        return powerEvent != null;
    }
    return super.eIsSet(featureID);
  }

} //PointAtomPowerEventImpl

/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Obligation_OKeyword_1_0_or_ObligationKeyword_1_1;
	protected AbstractElementAlias match_Power_PKeyword_1_0_or_PowerKeyword_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Obligation_OKeyword_1_0_or_ObligationKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObligationAccess().getOKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getObligationAccess().getObligationKeyword_1_1()));
		match_Power_PKeyword_1_0_or_PowerKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPowerAccess().getPKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getPowerAccess().getPowerKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFlexibleSpecialRule())
			return getFlexibleSpecialToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getImportListRule())
			return getImportListToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOtherCommandRule())
			return getOtherCommandToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * FlexibleSpecial:
	 * 	(ID | STRING | INT | ANY_OTHER | WS |
	 * 	'(' | ')' | '{' | '}' | '=' | ',' | ':')*
	 * ;
	 */
	protected String getFlexibleSpecialToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ImportList:
	 * 	('import' (ID | '*') ('.' (ID | '*'))* )*
	 * ;
	 */
	protected String getImportListToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * OtherCommand:
	 * 	Flexible ';'
	 * ;
	 */
	protected String getOtherCommandToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Obligation_OKeyword_1_0_or_ObligationKeyword_1_1.equals(syntax))
				emit_Obligation_OKeyword_1_0_or_ObligationKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Power_PKeyword_1_0_or_PowerKeyword_1_1.equals(syntax))
				emit_Power_PKeyword_1_0_or_PowerKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'O' | 'Obligation'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' debtor=VariableDotExpression
	 *     trigger=Proposition '-&gt;' (ambiguity) '(' debtor=VariableDotExpression
	 
	 * </pre>
	 */
	protected void emit_Obligation_OKeyword_1_0_or_ObligationKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'P' | 'Power'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' creditor=VariableDotExpression
	 *     trigger=Proposition '-&gt;' (ambiguity) '(' creditor=VariableDotExpression
	 
	 * </pre>
	 */
	protected void emit_Power_PKeyword_1_0_or_PowerKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

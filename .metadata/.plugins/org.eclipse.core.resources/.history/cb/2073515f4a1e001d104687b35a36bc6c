grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	entities=Entities
	logic=Logic
;

Logic:
	{Logic} (contract=Contract
	'{' clause=Clause '}')?
;

Contract:
	'contract' name=ID 'over' contractAsset=ID
;

Clause:
	'clause' name=ID '(' (params+=ClauseParameter (',' params+=ClauseParameter)*)? ')'
	':' returnEntity=ID '{' body=ClauseBody '}'
;

ClauseParameter:
	name=ID ':' entity=[Entity]
;

ClauseBody:
	( commands+=Command )*
;

Command:
	Declaration |
	Condition |
	ObligationWrapper |
	PowerWrapper |
	Constraint |
	{Command} OtherCommand
;

OtherCommand:
	Flexible ';'
;

Declaration:
	'let' name=ID '=' value=EntityDeclaration ';' |
	OtherDeclaration
;

OtherDeclaration:
	//'let' ID '=' FlexibleSpecial ';'
	'let' name=ID '=' '+' FlexibleSpecial ';' // TODO: how to get rid of '+'?
;

EntityDeclaration:
	name=[Entity] '{' (params+=EntityDeclarationParam (',' params+=EntityDeclarationParam)*)? '}'
;

EntityDeclarationParam:
	name=ID ':' value=Expression
;

Flexible:
	(ID | STRING | INT | ANY_OTHER)*
;

FlexibleSpecial:
	(ID | STRING | INT | ANY_OTHER | WS |
	'(' | ')' | '{' | '}' | '=' | ',' | ':')*
;

//FlexibleWithComma:
//	(ID | STRING | INT | ANY_OTHER | WS |
//	'(' | ')' | '{' | '}' | '=' | ',')*
//;

Entities:
	'namespace' domainName=ID
	(entities+=BaseEntity)+
;

BaseEntity:
	EnumEntity | Entity
;
	
Entity:
	type=EntityType name=ID ('extends' parent=[BaseEntity])? ('identified' 'by' idVariable=[Variable])?
	'{' (variables+=Variable)* '}'
;

EnumEntity:
	'enum' name=ID ('extends' parent=[BaseEntity])?
	'{' (variables+=EnumMember)* '}'
;

EnumMember:
	'o' name=ID
;

EntityType:
	name=("transaction" | "asset" | "concept" | "participant")
;

Variable:
	'o' type=(Primitive | [BaseEntity]) name=ID
	//PrimitiveVariable | AdvancedVariable
;

PrimitiveVariable:
	'o' type=Primitive name=ID
;

AdvancedVariable:
	'o' type=[BaseEntity] name=ID
;

Primitive:
	name=("String" | "Integer" | "Boolean" | "DateTime")
;

Condition:
	type=('pre' | 'post') prop=Proposition ';'
;

ObligationWrapper:
	type=('obl' | 'sobl') name=ID '=' obl=Obligation ';'
;

PowerWrapper:
	'pow' name=ID '=' pow=Power ';'
;

Constraint:
	'constr' contsr=Proposition
;

// Borrowed from Symboleo
Proposition: POr;

POr returns Proposition:
	PAnd ({POr.left=current} "or" right=PAnd)*;

PAnd returns Proposition:
	PEquality ({PAnd.left=current} "and" right=PEquality)*;

PEquality returns Proposition:
	PComparison ({PEquality.left=current} op=("==" | "!=") right=PComparison)*;

PComparison returns Proposition:
	PAtomicExpression ({PComparison.left=current} op=(">=" | "<=" | ">" | "<") right=PAtomicExpression)*;

PAtomicExpression returns Proposition:
	{PAtomRecursive} '(' inner=Proposition ')' |
	{NegatedPAtom} 'not' negated=PAtomicExpression |
	{PAtomPredicate} predicateFunction=PredicateFunction |
	{PAtomFunction} function=OtherFunction |
  	{PAtomEnum} enumeration=ID"("enumItem=ID")" |
  	{PAtomVariable} variable=VariableDotExpression |
	{PAtomPredicateTrueLiteral} value='true' |
	{PAtomPredicateFalseLiteral} value='false' |
	{PAtomDoubleLiteral} value=Double |
	{PAtomIntLiteral} value=INT |
	{PAtomStringLiteral} value=STRING |
	{PAtomDateLiteral} value= Date 
	;
	
OtherFunction:
  {PredicateFunctionIsEqual} name='IsEqual' '(' arg1=ID ',' arg2=ID ')' |
  {PredicateFunctionIsOwner} name='IsOwner' '(' arg1=ID ',' arg2=ID ')' |
  {PredicateFunctionCannotBeAssigned} name='CannotBeAssigned' '(' arg1=ID ')'
  ;
	
Double returns ecore::EDouble:
	INT '.' INT;
	
Date returns ecore::EDate:
  'Date' '(' STRING ')';
	
PredicateFunction:
	{PredicateFunctionHappens} name='Happens' '(' event=Event ')' |
	{PredicateFunctionWHappensBefore} name='WhappensBefore' '(' event=Event ',' point=Point ')' |
	{PredicateFunctionSHappensBefore} name='ShappensBefore' '(' event=Event ',' point=Point ')' |
	{PredicateFunctionHappensWithin} name='HappensWithin' '(' event=Event ',' interval=Interval ')'|
	{PredicateFunctionWHappensBeforeEvent} name='WhappensBeforeE' '(' event1=Event ',' event2=Event ')' |
	{PredicateFunctionSHappensBeforeEvent} name='ShappensBeforeE' '(' event1=Event ',' event2=Event ')' |
	{PredicateFunctionHappensAfter} name='HappensAfter' '(' event=Event ',' point=Point ')' |
	{PredicateFunctionOccurs} name='Occurs' '(' situation=Situation ',' interval=Interval ')';

Event:
	VariableEvent |
	ObligationEvent |
	ContractEvent |
	PowerEvent;
	
VariableEvent returns Event:
	{VariableEvent} variable=VariableDotExpression
;

PowerEvent returns Event:
	{PowerEvent} eventName=PowerEventName '(' 'powers.' powerVariable=[PowerWrapper] ')';

PowerEventName:
	'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Exerted' | 'Expired' | 'Terminated';

ObligationEvent returns Event:
	{ObligationEvent} eventName=ObligationEventName '(' 'obligations.' obligationVariable=[ObligationWrapper] ')';

ObligationEventName:
	'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Discharged' | 'Expired' | 'Fulfilled' | 'Violated' | 'Terminated';

ContractEvent returns Event:
	{ContractEvent} eventName=ContractEventName '(' 'self' ')';

ContractEventName:
	'Activated' | 'Suspended' | 'Resumed' | 'FulfilledObligations' | 'RevokedParty' | 'AssignedParty' | 'Terminated' | 'Rescinded';
	
Point:
	pointExpression=PointExpression;

PointExpression:
	PointFunction |
	PointAtom;

PointFunction returns PointExpression:
	{PointFunction} name=PointFunctionName '(' arg=PointExpression ',' value=Timevalue ',' timeUnit=TimeUnit ')';

PointFunctionName:
	'Date.add';

PointAtom returns PointExpression:
	{PointAtomParameterDotExpression} variable=VariableDotExpression | 
	{PointAtomObligationEvent} obligationEvent=ObligationEvent |
	{PointAtomContractEvent} contractEvent=ContractEvent |
	{PointAtomPowerEvent} powerEvent=PowerEvent;

Timevalue:
	{TimevalueInt} value=INT |
	{TimevalueVariable} variable=VariableDotExpression
;

TimeUnit:
	'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years';

Interval:
	intervalExpression=IntervalExpression;

IntervalExpression:
	{IntervalFunction} 'Interval' '(' arg1=PointExpression ',' arg2=PointExpression ')' |
	{SituationExpression} situation=Situation;

Situation:
	ObligationState |
	ContractState |
	PowerState;

PowerState:
	stateName=PowerStateName '(' 'powers.' powerVariable=[PowerWrapper] ')';

PowerStateName:
	'Create' | 'UnsuccessfulTermination' | 'Active' | 'InEffect' | 'Suspension' | 'SuccessfulTermination';

ObligationState:
	stateName=ObligationStateName '(' 'obligations.' obligationVariable=[ObligationWrapper] ')';

ObligationStateName:
	'Create' | 'Discharge' | 'Active' | 'InEffect' | 'Suspension' | 'Violation' | 'Fulfillment' | 'UnsuccessfulTermination';

ContractState:
	stateName=ContractStateName '(' 'self' ')';

ContractStateName:
	'Form' | 'UnAssign' | 'InEffect' | 'Suspension' | 'Rescission' | 'SuccessfulTermination' | 'UnsuccessfulTermination' | 'Active';

Obligation:
	(trigger=Proposition '->')? ('O' | 'Obligation') '(' debtor=VariableDotExpression ',' creditor=VariableDotExpression ',' antecedent=Proposition ',' consequent=Proposition ')';

Power:
	(trigger=Proposition '->')? ('P' | 'Power') '(' creditor=VariableDotExpression ',' debtor=VariableDotExpression ',' antecedent=Proposition ',' consequent=PowerFunction ')';
	
PowerFunction returns PowerFunction:
	{PFObligationSuspended} action = 'Suspended' '(' 'obligations.' norm = [ObligationWrapper] ')' | 
	{PFObligationResumed} action = 'Resumed' '(' 'obligations.' norm = [ObligationWrapper] ')' | 
	{PFObligationDischarged} action = 'Discharged' '(' 'obligations.' norm = [ObligationWrapper] ')' |
	{PFObligationTerminated} action = 'Terminated' '(' 'obligations.' norm = [ObligationWrapper] ')' |
	{PFObligationTriggered} action = 'Triggered' '(' 'obligations.' norm = [ObligationWrapper] ')' |
	{PFContractSuspended} action = 'Suspended' '(' norm = 'self' ')' | 
	{PFContractResumed} action = 'Resumed' '(' norm = 'self' ')' |
	{PFContractTerminated} action = 'Terminated' '(' norm = 'self' ')';
	
VariableDotExpression returns Ref:
	VariableRef ({VariableDotExpression.ref=current} "." tail=ID)*;

VariableRef returns Ref:
	{VariableRef} variable=ID;
	
	
Expression: Or;

Or returns Expression:
	And ({Or.left=current} "or" right=And)*;

And returns Expression:
	Equality ({And.left=current} "and" right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;

Comparison returns Expression:
	Addition ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Addition)*;

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*;

PrimaryExpression returns Expression:
	{PrimaryExpressionRecursive} '(' inner=Expression ')' |
	{PrimaryExpressionFunctionCall} function=FunctionCall |
	{NegatedPrimaryExpression} "not" expression=PrimaryExpression |
	AtomicExpression
;

AtomicExpression returns Expression:
	{AtomicExpressionTrue} value="true" |
	{AtomicExpressionFalse} value="false" |
	{AtomicExpressionDouble} value=Double |
	{AtomicExpressionInt} value=INT |
	{AtomicExpressionDate} value= Date |
	{AtomicExpressionEnum} enumeration=ID "(" enumItem=ID ")" |
	{AtomicExpressionString} value=STRING |
	{AtomicExpressionParameter} value=VariableDotExpression
;

FunctionCall:
	MathFunction | StringFunction | DateFunction
;
MathFunction returns FunctionCall:
  {TwoArgMathFunction} name=('Math.pow') '(' arg1=Expression ',' arg2=Expression ')' |
  {OneArgMathFunction} name=('Math.abs'|'Math.floor'|'Math.cbrt'
    |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
  ) '(' arg1=Expression ')';

StringFunction returns FunctionCall:
  {ThreeArgStringFunction} name=('String.substring'|'String.replaceAll') '(' arg1=Expression ',' arg2=Expression ',' arg3=Expression ')' |
  {TwoArgStringFunction} name=('String.concat') '(' arg1=Expression ',' arg2=Expression ')' |
  {OneArgStringFunction} name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim') '(' arg1=Expression ')';
	
DateFunction returns FunctionCall:
	{ThreeArgDateFunction} name='Date.add' '(' arg1=Expression ',' value=Expression ',' timeUnit=TimeUnit  ')' 
;

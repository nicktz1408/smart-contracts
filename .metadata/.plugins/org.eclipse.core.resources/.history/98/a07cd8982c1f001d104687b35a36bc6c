/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.Variable
import org.xtext.example.mydsl.myDsl.Entity
import org.eclipse.emf.common.util.EList
import org.xtext.example.mydsl.myDsl.PrimitiveVariable
import org.xtext.example.mydsl.myDsl.EnumMember
import org.xtext.example.mydsl.myDsl.EnumEntity
import org.xtext.example.mydsl.myDsl.AdvancedVariable
import org.xtext.example.mydsl.myDsl.BaseEntity
import org.xtext.example.mydsl.myDsl.Entities
import org.xtext.example.mydsl.myDsl.Contract
import org.xtext.example.mydsl.myDsl.Clause
import org.xtext.example.mydsl.myDsl.Command
import org.xtext.example.mydsl.myDsl.Declaration
import org.xtext.example.mydsl.myDsl.EntityDeclarationParam
import org.xtext.example.mydsl.myDsl.ClauseParameter
import org.xtext.example.mydsl.myDsl.Condition
import org.xtext.example.mydsl.myDsl.ObligationWrapper
import org.xtext.example.mydsl.myDsl.PowerWrapper
import org.xtext.example.mydsl.myDsl.Constraint
import org.xtext.example.mydsl.myDsl.Proposition
import org.xtext.example.mydsl.myDsl.Obligation
import org.xtext.example.mydsl.myDsl.Power

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	ArrayList <BaseEntity> entities = new ArrayList();
	String domainName;
	String clauseName;
	ContractData contract;
	EntityUtils entityUtils;
	SymboleoParser parser;
	
	BaseEntity inputEntity;
	
	ArrayList <LogicVariable> variables = new ArrayList();
	ArrayList <Proposition> preconditions = new ArrayList();
	ArrayList <Proposition> postconditions = new ArrayList();
	ArrayList <ObligationWrapper> obligations = new ArrayList();
	ArrayList <ObligationWrapper> survivingObligations = new ArrayList();
	ArrayList <PowerWrapper> powers = new ArrayList();
	ArrayList <Proposition> constraints = new ArrayList();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e : resource.allContents.toIterable.filter(Model)) {
			parse(e);
			
			generateFile(fsa);
		}
	}
	
	def parseContract(Contract contract) {
		var contractEntity = this.entityUtils.getEntityByName(contract.contractAsset);
		
		if(contractEntity !== null) {
			this.contract = new ContractData(contract.name, contractEntity);
			this.entityUtils.removeEntityByName(contract.contractAsset)
		}
	}
	
	def handleCluaseInputParams(EList<ClauseParameter> params) {		
		this.inputEntity = (params.size > 0 ? 
			this.entityUtils.getEntityByName(params.get(0).entity.name) :
			null
		);
		
		for(ClauseParameter inputParam : params) {
			this.entityUtils.removeEntityByName(inputParam.entity.name);
		}
	}
	
	def handleDeclaration(Declaration declaration) {
		var variable = new LogicVariable(
			declaration.name,
			declaration.value.name.name // entity name
		);
		
		for(EntityDeclarationParam param : declaration.value.params) {
			variable.addParam(param.name, param.value);
		}
		
		this.variables.add(variable);
	}
	
	def handleCondition(Condition condition) {
		if(condition.type == 'pre') {
			this.preconditions.add(condition.prop);
		} else if(condition.type == 'post') {
			this.postconditions.add(condition.prop);
		}
	}
	
	def handleObligation(ObligationWrapper obligation) {
		if(obligation.type == 'obl') {
			this.obligations.add(obligation)
		} else if(obligation.type == 'sobl') {
			this.survivingObligations.add(obligation)
		}
	}
	
	def parseClause(Clause clause) {
		this.clauseName = clause.name;
		
		handleCluaseInputParams(clause.params);
		
		for(Command command : clause.body.commands) {
			if(command instanceof Declaration) {
				var declaration = command as Declaration;
				
				handleDeclaration(declaration);
			} else if(command instanceof Condition) {
				var condition = command as Condition;
				
				handleCondition(condition);
			} else if(command instanceof ObligationWrapper) {
				var obligation = command as ObligationWrapper;
				
				handleObligation(obligation);
			} else if(command instanceof PowerWrapper) {
				this.powers.add(command as PowerWrapper);
			} else if(command instanceof Constraint) {
				this.constraints.add( (command as Constraint).contsr );
			}
		}
	}
	
	def sanitizeEntities(ArrayList<BaseEntity> entities) {
		// Remove Response, Clause, Request
//		for(entity : entities) {
//			if(entity.name == "Response" 
//				|| entity.name == "Clause" 
//				|| entity.name == "Request"
//			) {
//				entities.remove(entity);
//			}
//		}

		this.entityUtils.removeEntityByName('Response');
		this.entityUtils.removeEntityByName('Clause');
		this.entityUtils.removeEntityByName('Request');
	}
	
	def parse(Model model) {
		var entities = model.entities;
		
		
		this.entities.clear();
		this.variables.clear();
		this.preconditions.clear();
		this.postconditions.clear();
		this.obligations.clear();
		this.survivingObligations.clear();
		this.powers.clear();
		this.constraints.clear();
		
		this.domainName = entities.domainName;
		this.contract = null;
		
		this.entities.addAll(entities.entities);
		sanitizeEntities(this.entities)
		
		this.entityUtils = new EntityUtils(this.entities); // utility class
		this.parser = new SymboleoParser(); // parser (to parse propositions)
		
		if(model.logic !== null && model.logic.contract !== null) {
			parseContract(model.logic.contract);
			parseClause(model.logic.clause);
		}
	}
	
	def generateArticle(String name) {
		var vowels = "aeiou";
		
		for(var i = 0; i < 5; i++) {
			if(name.charAt(0) == vowels.charAt(i)) {
				return "isAn";
			}
		}
		
		return "isA";
	}
	
	def convertToSymboleoOntology(String name) {
		switch(name) {
			case "asset":
				return "Asset"
			
			case "transaction":
				return "Event"
			
			case "enum":
				return "Enum"
				
			case "concept":
				return "Event"
				
			case "participant":
				return "Role"
				
			default:
				return name
		}
	}
	
	def convertToSymboleoPrimitive(String type) {
		switch(type) {
			case "Integer":
				return "Number"
				
			case "String":
				return "String"
				
			case "Boolean":
				return "Boolean"
			
			case "DateTime":
				return "Date"
		}
	}
	
	def getVariableType(Variable variable) {
		if (variable instanceof PrimitiveVariable) {
			return convertToSymboleoPrimitive((variable as PrimitiveVariable).type.name)
		} else {
			return (variable as AdvancedVariable).type.name
		}
	}
	
	def generateEntityContents(Entity entity)'''
		«FOR variable : entity.variables SEPARATOR ', '»«variable.name»: «getVariableType(variable)»«ENDFOR»
	'''
	
	def generateEntityContents(EnumEntity entity)'''
		«FOR variable : entity.variables SEPARATOR ', '»«variable.name»«ENDFOR»
	'''
	
	def generateEntity(BaseEntity entity) {
		if (entity instanceof EnumEntity) {
			return '''
				«entity.name» «generateArticle('enum')» Enumeration(«generateEntityContents(entity as EnumEntity)»);
			'''
		} else {
			var entityCasted = entity as Entity
			
			var entityTypeName = (entityCasted.parent !== null ? 
				(entityCasted.parent instanceof EnumEntity ?
					(entityCasted.parent as EnumEntity).name :
					(entityCasted.parent as Entity).name
				) :
				entityCasted.type.name
			);
			
			return '''
				«entity.name» «generateArticle(entityTypeName)» «convertToSymboleoOntology(entityTypeName)»«IF entityCasted.variables.size() > 0» with «generateEntityContents(entityCasted)»«ENDIF»;
			'''
		}
	}
	
	def generateContract() {
		return '''
			Contract «this.contract.contractName» («generateEntityContents(this.inputEntity as Entity)»)
		'''
	}
	
	def generateVariableParams(ArrayList<LogicVariable.Param> params)'''
		«FOR param : params SEPARATOR ', '»«param.name» := «parser.generateExpressionString(param.value, '')»«ENDFOR»
	'''
	
	def generateVariable(LogicVariable variable)'''
		«variable.variableName»: «variable.entityName»«IF variable.params.size > 0» with «generateVariableParams(variable.params)»«ENDIF»;
	'''
	
	def generatePropositionsArray(ArrayList<Proposition> propositions)'''
		«FOR p : propositions»
			«"  "»«this.parser.generatePropositionString(p)»;
		«ENDFOR»
	'''
	
	def generateObligation(Obligation obl)'''
		«IF obl.trigger !== null»«parser.generatePropositionString(obl.trigger)» -> «ENDIF»O(«parser.generateDotExpressionString(obl.debtor,"")», «parser.generateDotExpressionString(obl.creditor,"")», «parser.generatePropositionString(obl.antecedent)», «parser.generatePropositionString(obl.consequent)»);
	'''
	
	def generateObligationsArray(ArrayList<ObligationWrapper> obligations)'''
		«FOR oblig : obligations»
			«"  "»«oblig.name» : «generateObligation(oblig.obl)»
		«ENDFOR»
	'''
	
	def generatePower(Power pow)'''
		«IF pow.trigger !== null»«parser.generatePropositionString(pow.trigger)» -> «ENDIF»P(«parser.generateDotExpressionString(pow.debtor,"")», «parser.generateDotExpressionString(pow.creditor,"")», «parser.generatePropositionString(pow.antecedent)», «parser.generatePowerAction(pow.consequent)»);
	'''
	
	def generatePowersArray(ArrayList<PowerWrapper> powers)'''
		«FOR power : powers»
			«"  "»«power.name» : «generatePower(power.pow)»
		«ENDFOR»
	'''
	
	def generateText()'''
		Domain «domainName»
		«FOR entity : this.entities»
			«"	"»«generateEntity(entity)»
		«ENDFOR»
		endDomain
		
		«IF this.contract !== null»
			«this.generateContract()»
			
			«IF this.variables.size() > 0»
			Declarations
			«FOR variable : this.variables»
				«"	"»«generateVariable(variable)»
			«ENDFOR»
			«ENDIF»
			
			«IF this.preconditions.size() > 0»
			Preconditions
			«generatePropositionsArray(this.preconditions)»
			«ENDIF»
			
			«IF this.postconditions.size() > 0»
			Postconditions
			«generatePropositionsArray(this.postconditions)»
			«ENDIF»
			
			«IF this.obligations.size() > 0»
			Obligations
			«generateObligationsArray(this.obligations)»
			«ENDIF»
			
			«IF this.survivingObligations.size() > 0»
			Surviving Obligations
			«generateObligationsArray(this.survivingObligations)»
			«ENDIF»
			
			«IF this.powers.size() > 0»
			Powers
			«generatePowersArray(this.powers)»
			«ENDIF»
			
			«IF this.constraints.size() > 0»
			Constraints
			«generatePropositionsArray(this.constraints)»
			«ENDIF»
			
			endContract
		«ENDIF»
	'''
	
	def generateFile(IFileSystemAccess2 fsa) {
		fsa.generateFile('./' + this.domainName + '.symboleo', generateText())
	}
}
